///////////////////////////////////////////////////////////
//  BookProcessorPipeline.cs
//  Implementation of the Class BookProcessorPipeline
//  Generated by Enterprise Architect
//  Created on:      08-ÎåÔÂ-2012 15:43:30
//  Original author: paul.siegmann
///////////////////////////////////////////////////////////


using System;
using System.Collections.Generic;

using nl.siegmann.epublib.domain;
namespace nl.siegmann.epublib.epub
{
    /// <summary>
    /// A book processor that combines several other bookprocessors  Fixes
    /// coverpage/coverimage. Cleans up the XHTML.
    /// </summary>
    public class BookProcessorPipeline : BookProcessor
    {

        private List<BookProcessor> bookProcessors;

        public BookProcessorPipeline()
            : this(null)
        {

        }

        /// 
        /// <param name="bookProcessingPipeline"></param>
        public BookProcessorPipeline(List<BookProcessor> bookProcessingPipeline)
        {
            this.bookProcessors = bookProcessingPipeline;
        }

        /// 
        /// <param name="bookProcessor"></param>
        public void addBookProcessor(BookProcessor bookProcessor)
        {
            if (this.bookProcessors == null)
            {
                bookProcessors = new List<BookProcessor>();
            }
            this.bookProcessors.Add(bookProcessor);
        }

        /// 
        /// <param name="bookProcessors"></param>
        public void addBookProcessors(List<BookProcessor> bookProcessors)
        {
            if (this.bookProcessors == null)
            {
                this.bookProcessors = new List<BookProcessor>();
            }
            this.bookProcessors.AddRange(bookProcessors);
        }

        public List<BookProcessor> getBookProcessors()
        {
            return this.bookProcessors;
        }

        /// 
        /// <param name="book"></param>
        public Book processBook(Book book)
        {
            if (bookProcessors == null)
            {
                return book;
            }
            foreach (BookProcessor bookProcessor in bookProcessors)
            {
                try
                {
                    book = bookProcessor.processBook(book);
                }
                catch (Exception e)
                {

                }
            }
            return book;
        }

        /// 
        /// <param name="bookProcessingPipeline"></param>
        public void setBookProcessingPipeline(List<BookProcessor> bookProcessingPipeline)
        {
            this.bookProcessors = bookProcessingPipeline;
        }

    }//end BookProcessorPipeline

}//end namespace epub