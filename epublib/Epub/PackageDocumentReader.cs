///////////////////////////////////////////////////////////
//  PackageDocumentReader.cs
//  Implementation of the Class PackageDocumentReader
//  Generated by Enterprise Architect
//  Created on:      08-ÎåÔÂ-2012 16:12:02
//  Original author: paul
///////////////////////////////////////////////////////////


using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;
using nl.siegmann.epublib.domain;
using nl.siegmann.epublib.epub;
using nl.siegmann.epublib.service;
using nl.siegmann.epublib.util;

namespace nl.siegmann.epublib.epub
{
    /// <summary>
    /// Reads the opf package document as defined by namespace http://www.idpf.
    /// org/2007/opf
    /// </summary>
    public class PackageDocumentReader : PackageDocumentBase
    {

        //private static readonly Logger log = LoggerFactory.getLogger(PackageDocumentReader.class);
        private static readonly String[] POSSIBLE_NCX_ITEM_IDS = new String[] { "toc", "ncx" };

        /// <summary>
        /// package
        /// </summary>
        /// <param name="packageDocument"></param>
        internal static List<String> findCoverHrefs(XElement packageDocument)
        {
            List<String> result = new List<String>();

            // try and find a meta tag with name = 'cover' and a non-blank id
            String coverResourceId = DOMUtil.getFindAttributeValue(packageDocument, NAMESPACE_OPF,
                                                OPFTags.meta, OPFAttributes.name, OPFValues.meta_cover,
                                                OPFAttributes.content);
            String coverHref = string.Empty;
            if (StringUtil.isNotBlank(coverResourceId))
            {
                coverHref = DOMUtil.getFindAttributeValue(packageDocument, NAMESPACE_OPF,
                        OPFTags.item, OPFAttributes.id, coverResourceId,
                        OPFAttributes.href);
                if (StringUtil.isNotBlank(coverHref))
                {
                    result.Add(coverHref);
                }
                else
                {
                    result.Add(coverResourceId); // maybe there was a cover href put in the cover id attribute
                }
            }
            // try and find a reference tag with type is 'cover' and reference is not blank
            coverHref = DOMUtil.getFindAttributeValue(packageDocument, NAMESPACE_OPF,
                                               OPFTags.reference, OPFAttributes.type, OPFValues.reference_cover,
                                               OPFAttributes.href);
            if (StringUtil.isNotBlank(coverHref))
            {
                result.Add(coverHref);
            }
            return result;
        }

        /// <summary>
        /// The spine tag should contain a 'toc' attribute with as value the resource id of
        /// the table of contents resource.  Here we try several ways of finding this table
        /// of contents resource. We try the given attribute value, some often-used ones
        /// and finally look through all resources for the first resource with the table of
        /// contents mimetype.
        /// </summary>
        /// <param>resourcesById</param>
        /// <param name="spineElement"></param>
        /// <param name="resources"></param>
        private static Resource findTableOfContentsResource(XElement spineElement, Resources resources)
        {
            String tocResourceId = DOMUtil.getAttribute(spineElement, OPFAttributes.toc);
            Resource tocResource = null;
            if (StringUtil.isNotBlank(tocResourceId))
            {
                tocResource = resources.getByIdOrHref(tocResourceId);
            }

            if (tocResource != null)
            {
                return tocResource;
            }

            for (int i = 0; i < POSSIBLE_NCX_ITEM_IDS.Length; i++)
            {
                tocResource = resources.getByIdOrHref(POSSIBLE_NCX_ITEM_IDS[i]);
                if (tocResource != null)
                {
                    return tocResource;
                }
                tocResource = resources.getByIdOrHref(POSSIBLE_NCX_ITEM_IDS[i].ToUpper());
                if (tocResource != null)
                {
                    return tocResource;
                }
            }

            // get the first resource with the NCX mediatype
            tocResource = resources.findFirstResourceByMediaType(MediatypeService.NCX);

            if (tocResource == null)
            {
               // log.error("Could not find table of contents resource. Tried resource with id '" + tocResourceId + "', " + Constants.DEFAULT_TOC_ID + ", " + Constants.DEFAULT_TOC_ID.toUpperCase() + " and any NCX resource.");
            }
            return tocResource;
        }

        /// <summary>
        /// Strips off the package prefixes up to the href of the packageHref.  Example: If
        /// the packageHref is "OEBPS/content.opf" then a resource href like "OEBPS/foo/bar.
        /// html" will be turned into "foo/bar.html"
        /// </summary>
        /// <param name="packageHref"></param>
        /// <param name="resourcesByHref"></param>
        private static Resources fixHrefs(String packageHref, Resources resourcesByHref)
        {
            int lastSlashPos = packageHref.IndexOf('/');
            if (lastSlashPos < 0)
            {
                return resourcesByHref;
            }
            Resources result = new Resources();
            foreach (Resource resource in resourcesByHref.getAll())
            {
                if (StringUtil.isNotBlank(resource.getHref())
                        || resource.getHref().Length > lastSlashPos)
                {
                    resource.setHref(resource.getHref().Substring(lastSlashPos + 1));
                }
                result.add(resource);
            }
            return result;
        }

        /// <summary>
        /// Creates a spine out of all resources in the resources. The generated spine
        /// consists of all XHTML pages in order of their href.
        /// </summary>
        /// <param name="resources"></param>
        private static Spine generateSpineFromResources(Resources resources)
        {
            Spine result = new Spine();
            List<String> resourceHrefs = new List<String>(resources.getAllHrefs());
            foreach (String resourceHref in resourceHrefs)
            {
                Resource resource = resources.getByHref(resourceHref);
                if (resource.getMediaType() == MediatypeService.NCX)
                {
                    result.setTocResource(resource);
                }
                else if (resource.getMediaType() == MediatypeService.XHTML)
                {
                    result.addSpineReference(new SpineReference(resource));
                }
            }
            return result;
        }

        /// 
        /// <param name="packageResource"></param>
        /// <param name="epubReader"></param>
        /// <param name="book"></param>
        /// <param name="resources"></param>
        public static void read(Resource packageResource, EpubReader epubReader, Book book, Resources resources)
        {
            XElement packageDocument = XElement.Load(packageResource.getInputStream());
            String packageHref = packageResource.getHref();
            resources = fixHrefs(packageHref, resources);
            readGuide(packageDocument, epubReader, book, resources);
            System.Collections.Generic.Dictionary<string, string> idMapping = new Dictionary<string, string>();
            resources = readManifest(packageDocument, packageHref, epubReader, resources, idMapping);

            book.setResources(resources);
            readCover(packageDocument, book);
            //  book.setMetadata(PackageDocumentMetadataReader.readMetadata(packageDocument, book.getResources()));
            book.setSpine(readSpine(packageDocument, epubReader, book.getResources(), idMapping));

            // if we did not find a cover page then we make the first page of the book the cover page
            if (book.getCoverPage() == null && book.getSpine().size() > 0)
            {
                book.setCoverPage(book.getSpine().getResource(0));
            }
        }

        /// <summary>
        /// Finds the cover resource in the packageDocument and adds it to the book if
        /// found. Keeps the cover resource in the resources map
        /// </summary>
        /// <param>resources</param>
        /// <param name="packageDocument"></param>
        /// <param name="book"></param>
        private static void readCover(XElement packageDocument, Book book)
        {
            List<String> coverHrefs = findCoverHrefs(packageDocument);
            foreach (String coverHref in coverHrefs)
            {
                Resource resource = book.getResources().getByHref(coverHref);
                if (resource == null)
                {
                    //log.error("Cover resource " + coverHref + " not found");
                    continue;
                }
                if (resource.getMediaType() == MediatypeService.XHTML)
                {
                    book.setCoverPage(resource);
                }
                else if (MediatypeService.isBitmapImage(resource.getMediaType()))
                {
                    book.setCoverImage(resource);
                }
            }
        }

        /// <summary>
        /// Reads the book's guide. Here some more attempts are made at finding the cover
        /// page.
        /// </summary>
        /// <param name="packageDocument"></param>
        /// <param name="epubReader"></param>
        /// <param name="book"></param>
        /// <param name="resources">resources</param>
        private static void readGuide(XElement packageDocument, EpubReader epubReader, Book book, Resources resources)
        {
            XElement guideElement = DOMUtil.getFirstElementByTagNameNS(packageDocument, NAMESPACE_OPF, OPFTags.guide);
            if (guideElement == null)
            {
                return;
            }
            Guide guide = book.getGuide();
            var guideReferences = packageDocument.Elements(NAMESPACE_OPF + OPFTags.reference).Elements<XElement>();
            foreach (XElement referenceElement in (from e in guideReferences where e.Value.Trim() != string.Empty select e))
            {
                String resourceHref = DOMUtil.getAttribute(referenceElement, OPFAttributes.href);
                if (StringUtil.isBlank(resourceHref))
                {
                    continue;
                }
                Resource resource = resources.getByHref(StringUtil.substringBefore(resourceHref, Constants.FRAGMENT_SEPARATOR_CHAR));
                if (resource == null)
                {
                    //log.error("Guide is referencing resource with href " + resourceHref + " which could not be found");
                    continue;
                }
                String type = DOMUtil.getAttribute(referenceElement, OPFAttributes.type);
                if (StringUtil.isBlank(type))
                {
                    //log.error("Guide is referencing resource with href " + resourceHref + " which is missing the 'type' attribute");
                    continue;
                }
                String title = DOMUtil.getAttribute(referenceElement, OPFAttributes.title);
                if (GuideReference.COVER.Equals(type))
                {
                    continue; // cover is handled elsewhere
                }
                GuideReference reference = new GuideReference(resource, type, title, StringUtil.substringAfter(resourceHref, Constants.FRAGMENT_SEPARATOR_CHAR));
                guide.addReference(reference);
            }
        }

        /// <summary>
        /// Reads the manifest containing the resource ids, hrefs and mediatypes.
        /// </summary>
        /// <param>book</param>
        /// <param>resourcesByHref</param>
        /// <param>a Map with resources, with their id's as key.</param>
        /// <param name="packageDocument"></param>
        /// <param name="packageHref"></param>
        /// <param name="epubReader"></param>
        /// <param name="resources"></param>
        /// <param name="idMapping"></param>
        private static Resources readManifest(XElement packageDocument, String packageHref, EpubReader epubReader, Resources resources, Dictionary<String, String> idMapping)
        {
            XElement manifestElement = DOMUtil.getFirstElementByTagNameNS(packageDocument, NAMESPACE_OPF, OPFTags.manifest);
            Resources result = new Resources();
            if (manifestElement == null)
            {
                return result;
            }
            var itemElements = packageDocument.Elements(NAMESPACE_OPF + OPFTags.item).Elements<XElement>();

            foreach (XElement itemElement in (from e in itemElements where e.Value.Trim() != string.Empty select e))
            {
                String id = DOMUtil.getAttribute(itemElement, OPFAttributes.id);
                String href = DOMUtil.getAttribute(itemElement, OPFAttributes.href);
                try
                {
                    href = System.Web.HttpUtility.UrlDecode(href, System.Text.Encoding.GetEncoding(Constants.ENCODING));
                }
                catch (Exception e)
                {
                    //log.error(e.getMessage());
                }
                String mediaTypeName = DOMUtil.getAttribute(itemElement, OPFAttributes.media_type);
                Resource resource = resources.remove(href);
                if (resource == null)
                {
                    //log.error("resource with href '" + href + "' not found");
                    continue;
                }
                resource.setId(id);
                MediaType mediaType = MediatypeService.getMediaTypeByName(mediaTypeName);
                if (mediaType != null)
                {
                    resource.setMediaType(mediaType);
                }
                result.add(resource);
                idMapping.Add(id, resource.getId());
            }
            return result;
        }

        /// <summary>
        /// Reads the document's spine, containing all sections in reading order.
        /// </summary>
        /// <param>book</param>
        /// <param>resourcesById</param>
        /// <param name="packageDocument"></param>
        /// <param name="epubReader"></param>
        /// <param name="resources"></param>
        /// <param name="idMapping"></param>
        private static Spine readSpine(XElement packageDocument, EpubReader epubReader, Resources resources, Dictionary<String, String> idMapping)
        {
            XElement spineElement = DOMUtil.getFirstElementByTagNameNS(packageDocument, NAMESPACE_OPF, OPFTags.spine);
            if (spineElement == null)
            {
                //log.error("Element " + OPFTags.spine + " not found in package document, generating one automatically");
                return generateSpineFromResources(resources);
            }
            Spine result = new Spine();
            result.setTocResource(findTableOfContentsResource(spineElement, resources));
            var spineNodes = packageDocument.Elements(NAMESPACE_OPF + OPFTags.itemref).Elements<XElement>();
            IEnumerator spineNode = spineNodes.GetEnumerator();
            List<SpineReference> spineReferences = new List<SpineReference>();
            while (spineNode.MoveNext())
            {
                XElement spineItem = (XElement)spineNode.Current;
                String itemref = DOMUtil.getAttribute(spineItem, OPFAttributes.idref);
                if (StringUtil.isBlank(itemref))
                {
                    //log.error("itemref with missing or empty idref"); // XXX
                    continue;
                }
                String id = idMapping[itemref];
                if (id == null)
                {
                    id = itemref;
                }
                Resource resource = resources.getByIdOrHref(id);
                if (resource == null)
                {
                    //log.error("resource with id \'" + id + "\' not found");
                    continue;
                }

                SpineReference spineReference = new SpineReference(resource);
                if (OPFValues.no.Equals(DOMUtil.getAttribute(spineItem, OPFAttributes.linear)))
                {
                    spineReference.setLinear(false);
                }
                spineReferences.Add(spineReference);
            }
            result.setSpineReferences(spineReferences);
            return result;
        }

    }//end PackageDocumentReader

}//end namespace epub