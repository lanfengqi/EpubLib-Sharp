///////////////////////////////////////////////////////////
//  StringUtil.cs
//  Implementation of the Class StringUtil
//  Generated by Enterprise Architect
//  Created on:      03-ÎåÔÂ-2012 10:56:26
//  Original author: paul.siegmann
///////////////////////////////////////////////////////////


using System;
using System.Linq;

namespace nl.siegmann.epublib.util
{
    /// <summary>
    /// Various String utility functions.  Most of the functions herein are re-
    /// implementations of the ones in apache commons StringUtils. The reason for re-
    /// implementing this is that the functions are fairly simple and using my own
    /// implementation saves the inclusion of a 200Kb jar file.
    /// </summary>
    public class StringUtil
    {

        public StringUtil()
        {

        }

        ~StringUtil()
        {

        }

        public virtual void Dispose()
        {

        }

        /// <summary>
        /// Changes a path containing '..', '.' and empty dirs into a path that doesn't.
        /// X/foo/../Y is changed into 'X/Y', etc. Does not handle invalid paths like "../".
        /// 
        /// </summary>
        /// <param name="path"></param>
        public static String collapsePathDots(String path)
        {

            return "";
        }

        /// <summary>
        /// If the given text is null return "", the original text otherwise.
        /// </summary>
        /// <param name="text"></param>
        public static String defaultIfNull(String text)
        {

            return "";
        }

        /// <summary>
        /// If the given text is null return "", the given defaultValue otherwise.
        /// </summary>
        /// <param name="text"></param>
        /// <param name="defaultValue"></param>
        public static String defaultIfNull(String text, String defaultValue)
        {

            return "";
        }

        /// <summary>
        /// Whether the given source string ends with the given suffix, ignoring case.
        /// </summary>
        /// <param name="source"></param>
        /// <param name="suffix"></param>
        public static bool endsWithIgnoreCase(String source, String suffix)
        {
            if (isEmpty(suffix))
            {
                return true;
            }
            if (isEmpty(source))
            {
                return false;
            }
            if (suffix.Length > source.Length)
            {
                return false;
            }
            return source.Substring(source.Length - suffix.Length).ToLower().Equals(suffix.ToLower());
        }

        /// <summary>
        /// Null-safe string comparator
        /// </summary>
        /// <param name="text1"></param>
        /// <param name="text2"></param>
        public static bool equals(String text1, String text2)
        {

            return true;
        }

        /// 
        /// <param name="values"></param>
        public static int hashCode(String[] values)
        {
            return values.Aggregate(31, (current, t) => current ^ t.GetHashCode());
        }

        /// <summary>
        /// Whether the String is null, zero-length and does contain only whitespace.
        /// </summary>
        /// <param name="text"></param>
        public static bool isBlank(String text)
        {
            if (isEmpty(text))
            {
                return true;
            }
            return (text.Trim().Length == 0);
        }

        /// <summary>
        /// Whether the given string is null or zero-length.
        /// </summary>
        /// <param name="text"></param>
        public static bool isEmpty(String text)
        {
            return (text == null) || (string.IsNullOrEmpty(text));
        }

        /// <summary>
        /// Whether the String is not null, not zero-length and does not contain of only
        /// whitespace.
        /// </summary>
        /// <param name="text"></param>
        public static bool isNotBlank(String text)
        {
            return !isBlank(text);
        }

        /// <summary>
        /// Gives the substring of the given text after the given separator.  If the text
        /// does not contain the given separator then "" is returned.
        /// </summary>
        /// <param>separator</param>
        /// <param name="text"></param>
        /// <param name="c"></param>
        public static String substringAfter(String text, char c)
        {

            return "";
        }

        /// <summary>
        /// Gives the substring of the given text after the last occurrence of the given
        /// separator.  If the text does not contain the given separator then "" is
        /// returned.
        /// </summary>
        /// <param name="text"></param>
        /// <param name="separator"></param>
        public static String substringAfterLast(String text, char separator)
        {

            return "";
        }

        /// <summary>
        /// Gives the substring of the given text before the given separator.  If the text
        /// does not contain the given separator then the given text is returned.
        /// </summary>
        /// <param name="text"></param>
        /// <param name="separator"></param>
        public static String substringBefore(String text, char separator)
        {

            return "";
        }

        /// <summary>
        /// Gives the substring of the given text before the last occurrence of the given
        /// separator.  If the text does not contain the given separator then the given
        /// text is returned.
        /// </summary>
        /// <param name="text"></param>
        /// <param name="separator"></param>
        public static String substringBeforeLast(String text, char separator)
        {

            return "";
        }

        /// <summary>
        /// Pretty toString printer.
        /// </summary>
        /// <param name="keyValues"></param>
        public static String toString(Object keyValues)
        {

            return "";
        }

    }//end StringUtil

}//end namespace util