///////////////////////////////////////////////////////////
//  SpineReference.cs
//  Implementation of the Class SpineReference
//  Generated by Enterprise Architect
//  Created on:      02-ÎåÔÂ-2012 16:21:07
//  Original author: lanfengqi
///////////////////////////////////////////////////////////


using System;
using nl.siegmann.epublib.domain;
namespace nl.siegmann.epublib.domain {
	/// <summary>
	/// A Section of a book. Represents both an item in the package document and a item
	/// in the index.
	/// </summary>
    [Serializable]
	public class SpineReference : ResourceReference {

		private bool linear = true;
		private static readonly long serialVersionUID = -7921609197351510248L;

		public SpineReference(){

		}

		~SpineReference(){

		}

		public override void Dispose(){

		}

		/// 
		/// <param name="resource"></param>
		public SpineReference(Resource resource){

		}

		/// 
		/// <param name="resource"></param>
		/// <param name="linear"></param>
		public SpineReference(Resource resource, bool linear){

		}

		/// <summary>
		/// Linear denotes whether the section is Primary or Auxiliary. Usually the cover
		/// page has linear set to false and all the other sections have it set to true.
		/// It's an optional property that readers may also ignore.
		///            <blockquote>primary or auxiliary is useful for Reading Systems which
		/// opt to present auxiliary content differently than primary content. For example,
		/// a Reading System might opt to render auxiliary content in a popup window apart
		/// from the main window which presents the primary content. (For an example of the
		/// types of content that may be considered auxiliary, refer to the example below
		/// and the subsequent discussion.)</blockquote>
		/// </summary>
		/// <see>http://www.idpf.org/2007/opf/OPF_2.0_final_spec.html#TOC2.4</see>
		public bool isLinear(){

			return false;
		}

		/// 
		/// <param name="linear"></param>
		public void setLinear(bool linear){

		}

	}//end SpineReference

}//end namespace domain