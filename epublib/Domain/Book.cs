///////////////////////////////////////////////////////////
//  Book.cs
//  Implementation of the Class Book
//  Generated by Enterprise Architect
//  Created on:      02-ÎåÔÂ-2012 16:20:58
//  Original author: lanfengqi
///////////////////////////////////////////////////////////



using System;
using System.Collections.Generic;
using nl.siegmann.epublib.domain;
namespace nl.siegmann.epublib.domain
{

    public class Book
    {
        private Resource coverImage;
        private Guide guide = new Guide();
        private Metadata metadata = new Metadata();
        private Resource ncxResource;
        private Resource opfResource;
        private Resources resources = new Resources();
        private static readonly long serialVersionUID = 2068355170895770100L;
        private Spine spine = new Spine();
        private TableOfContents tableOfContents = new TableOfContents();

        /// 
        /// <param name="resource"></param>
        public Resource addResource(Resource resource)
        {
            resources.add(resource);
            return resource;
        }

        /// <summary>
        /// Adds the resource to the table of contents of the book as a child section of
        /// the given parentSection
        /// </summary>
        /// <param name="parentSection"></param>
        /// <param name="sectionTitle"></param>
        /// <param name="resource"></param>
        public TOCReference addSection(TOCReference parentSection, string sectionTitle, Resource resource)
        {
            getResources().add(resource);
            if (spine.findFirstResourceById(resource.getId()) < 0)
            {
                spine.addSpineReference(new SpineReference(resource));
            }
            return parentSection.addChildSection(new TOCReference(sectionTitle, resource));
        }

        /// <summary>
        /// Adds a resource to the book's set of resources, table of contents and if there
        /// is no resource with the id in the spine also adds it to the spine.
        /// </summary>
        /// <param name="title"></param>
        /// <param name="resource"></param>
        public TOCReference addSection(string title, Resource resource)
        {
            getResources().add(resource);
            TOCReference tocReference = tableOfContents.addTOCReference(new TOCReference(title, resource));
            if (spine.findFirstResourceById(resource.getId()) < 0)
            {
                spine.addSpineReference(new SpineReference(resource));
            }
            return tocReference;
        }

        /// 
        /// <param name="resource"></param>
        /// <param name="allReachableResources"></param>
        private static void addToContentsResult(Resource resource, Dictionary<String, Resource> allReachableResources)
        {
            if (resource != null && (!allReachableResources.ContainsKey(resource.getHref())))
            {
                allReachableResources.Add(resource.getHref(), resource);
            }
        }

        public void generateSpineFromTableOfContents()
        {
            Spine spine = new Spine(tableOfContents);

            // in case the tocResource was already found and assigned
            spine.setTocResource(this.spine.getTocResource());

            this.spine = spine;
        }

        /// <summary>
        /// All Resources of the Book that can be reached via the Spine, the
        /// TableOfContents or the Guide.
        ///            <p/> Consists of a list of "reachable" resources:
        ///            <ul>
        ///            <li>The coverpage</li>
        ///            <li>The resources of the Spine that are not already in the
        /// result</li>
        ///            <li>The resources of the Table of Contents that are not already in
        /// the result</li>
        ///            <li>The resources of the Guide that are not already in the
        /// result</li>
        ///            </ul> To get all html files that make up the epub file use
        /// </summary>
        /// <see>getResources().getAll()</see>
        public List<Resource> getContents()
        {
            Dictionary<String, Resource> result = new Dictionary<String, Resource>();
            addToContentsResult(getCoverPage(), result);

            foreach (SpineReference spineReference in getSpine().getSpineReferences())
            {
                addToContentsResult(spineReference.getResource(), result);
            }

            foreach (Resource resource in getTableOfContents().getAllUniqueResources())
            {
                addToContentsResult(resource, result);
            }

            foreach (GuideReference guideReference in getGuide().getReferences())
            {
                addToContentsResult(guideReference.getResource(), result);
            }
            return new List<Resource>(result.Values);
        }

        /// <summary>
        /// The book's cover image.
        /// </summary>
        public Resource getCoverImage()
        {
            return coverImage;
        }

        /// <summary>
        /// The book's cover page. An XHTML document containing a link to the cover image.
        /// </summary>
        public Resource getCoverPage()
        {
            Resource coverPage = guide.getCoverPage();
            if (coverPage == null)
            {
                coverPage = spine.getResource(0);
            }
            return coverPage;
        }

        /// <summary>
        /// The guide; contains references to special sections of the book like colophon,
        /// glossary, etc.
        /// </summary>
        public Guide getGuide()
        {
            return guide;
        }

        /// <summary>
        /// The Book's metadata (titles, authors, etc)
        /// </summary>
        public Metadata getMetadata()
        {
            return metadata;
        }

        public Resource getNcxResource()
        {
            return ncxResource;
        }

        public Resource getOpfResource()
        {
            return opfResource;
        }

        /// <summary>
        /// The collection of all images, chapters, sections, xhtml files, stylesheets, etc
        /// that make up the book.
        /// </summary>
        public Resources getResources()
        {
            return resources;
        }

        /// <summary>
        /// The sections of the book that should be shown if a user reads the book from
        /// start to finish.
        /// </summary>
        public Spine getSpine()
        {
            return spine;
        }

        /// <summary>
        /// The Table of Contents of the book.
        /// </summary>
        public TableOfContents getTableOfContents()
        {
            return tableOfContents;
        }

        /// <summary>
        /// Gets the first non-blank title from the book's metadata.
        /// </summary>
        public string getTitle()
        {
            return getMetadata().getFirstTitle();
        }

        /// 
        /// <param name="coverImage"></param>
        public void setCoverImage(Resource coverImage)
        {
            if (coverImage == null)
            {
                return;
            }
            if (!resources.containsByHref(coverImage.getHref()))
            {
                resources.add(coverImage);
            }
            this.coverImage = coverImage;
        }

        /// 
        /// <param name="coverPage"></param>
        public void setCoverPage(Resource coverPage)
        {
            if (coverPage == null)
            {
                return;
            }
            if (!resources.containsByHref(coverPage.getHref()))
            {
                resources.add(coverPage);
            }
            guide.setCoverPage(coverPage);
        }

        /// 
        /// <param name="metadata"></param>
        public void setMetadata(Metadata metadata)
        {
            this.metadata = metadata;
        }

        /// 
        /// <param name="ncxResource"></param>
        public void setNcxResource(Resource ncxResource)
        {
            this.ncxResource = ncxResource;
        }

        /// 
        /// <param name="opfResource"></param>
        public void setOpfResource(Resource opfResource)
        {
            this.opfResource = opfResource;
        }

        /// 
        /// <param name="resources"></param>
        public void setResources(Resources resources)
        {
            this.resources = resources;
        }

        /// 
        /// <param name="spine"></param>
        public void setSpine(Spine spine)
        {
            this.spine = spine;
        }

        /// 
        /// <param name="tableOfContents"></param>
        public void setTableOfContents(TableOfContents tableOfContents)
        {
            this.tableOfContents = tableOfContents;
        }

    }//end Book

}//end namespace domain