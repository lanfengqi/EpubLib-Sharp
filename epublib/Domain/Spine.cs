///////////////////////////////////////////////////////////
//  Spine.cs
//  Implementation of the Class Spine
//  Generated by Enterprise Architect
//  Created on:      02-ÎåÔÂ-2012 16:21:06
//  Original author: lanfengqi
///////////////////////////////////////////////////////////


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using nl.siegmann.epublib.domain;
namespace nl.siegmann.epublib.domain {
	/// <summary>
	/// The spine sections are the sections of the book in the order in which the book
	/// should be read.  This contrasts with the Table of Contents sections which is an
	/// index into the Book's sections.
	/// </summary>
	/// <see>nl.siegmann.epublib.domain.TableOfContents</see>
    [Serializable]
	public class Spine  {

		private static readonly long serialVersionUID = 3878483958947357246L;
		private List<SpineReference> spineReferences;
		private Resource tocResource;



		~Spine(){

		}

		public virtual void Dispose(){

		}

		public Spine(){

		}

		/// <summary>
		/// Creates a spine out of all the resources in the table of contents.
		/// </summary>
		/// <param name="tableOfContents">tableOfContents</param>
		public Spine(TableOfContents tableOfContents){

		}

		/// 
		/// <param name="spineReferences"></param>
		public Spine(List<SpineReference> spineReferences){

		}

		/// <summary>
		/// Adds the given resource to the spine references and returns it.
		/// </summary>
		/// <param>spineReference</param>
		/// <param name="resource"></param>
		public SpineReference addResource(Resource resource){

			return null;
		}

		/// <summary>
		/// Adds the given spineReference to the spine references and returns it.
		/// </summary>
		/// <param name="spineReference"></param>
		public SpineReference addSpineReference(SpineReference spineReference){

			return null;
		}

		/// 
		/// <param name="resources"></param>
		public static List<SpineReference> createSpineReferences(Collection<Resource> resources){

			return null;
		}

		/// <summary>
		/// Finds the first resource that has the given resourceId.  Null if not found.
		/// </summary>
		/// <param name="resourceId"></param>
		public int findFirstResourceById(string resourceId){

			return 0;
		}

		/// <summary>
		/// Gets the resource at the given index. Null if not found.
		/// </summary>
		/// <param name="index"></param>
		public Resource getResource(int index){

			return null;
		}

		/// <summary>
		/// The position within the spine of the given resource.
		/// </summary>
		/// something < 0 if not found.
		/// <param name="currentResource"></param>
		public int getResourceIndex(Resource currentResource){

			return 0;
		}

		/// <summary>
		/// The first position within the spine of a resource with the given href.
		/// </summary>
		/// something < 0 if not found.
		/// <param name="resourceHref"></param>
		public int getResourceIndex(string resourceHref){

			return 0;
		}

		public List<SpineReference> getSpineReferences(){

			return null;
		}

		/// <summary>
		/// The resource containing the XML for the tableOfContents. When saving an epub
		/// file this resource needs to be in this place.
		/// </summary>
		public Resource getTocResource(){

			return null;
		}

		public bool isEmpty(){

			return false;
		}

		/// 
		/// <param name="spineReferences"></param>
		public void setSpineReferences(List<SpineReference> spineReferences){

		}

		/// <summary>
		/// As per the epub file format the spine officially maintains a reference to the
		/// Table of Contents. The epubwriter will look for it here first, followed by some
		/// clever tricks to find it elsewhere if not found. Put it here to be sure of the
		/// expected behaviours.
		/// </summary>
		/// <param name="tocResource">tocResource</param>
		public void setTocResource(Resource tocResource){

		}

		/// <summary>
		/// The number of elements in the spine.
		/// </summary>
		public int size(){

			return 0;
		}

	}//end Spine

}//end namespace domain