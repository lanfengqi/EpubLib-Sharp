///////////////////////////////////////////////////////////
//  Guide.cs
//  Implementation of the Class Guide
//  Generated by Enterprise Architect
//  Created on:      02-ÎåÔÂ-2012 16:21:00
//  Original author: lanfengqi
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using nl.siegmann.epublib.domain;
namespace nl.siegmann.epublib.domain
{
    /// <summary>
    /// The guide is a selection of special pages of the book. Examples of these are
    /// the cover, list of illustrations, etc.  It is an optional part of an epub, and
    /// support for the various types of references varies by reader.  The only part of
    /// this that is heavily used is the cover page.
    /// </summary>
    [Serializable]
    public class Guide
    {

        private static readonly int COVERPAGE_NOT_FOUND = -1;
        private static readonly int COVERPAGE_UNITIALIZED = -2;
        private int coverPageIndex = -1;
        private static string DEFAULT_COVER_TITLE = GuideReference.COVER;
        private List<GuideReference> references = new List<GuideReference>();
        private static readonly long serialVersionUID = -6256645339915751189L;

        /// 
        /// <param name="reference"></param>
        public ResourceReference addReference(GuideReference reference)
        {
            references.Add(reference);
            uncheckCoverPage();
            return reference;
        }

        private void checkCoverPage()
        {
            if (coverPageIndex == COVERPAGE_UNITIALIZED)
            {
                initCoverPage();
            }
        }

        /// <summary>
        /// The coverpage of the book.
        /// </summary>
        public Resource getCoverPage()
        {
            GuideReference guideReference = getCoverReference();
            if (guideReference == null)
            {
                return null;
            }
            return guideReference.getResource();
        }

        public GuideReference getCoverReference()
        {
            checkCoverPage();
            if (coverPageIndex >= 0)
            {
                return references[coverPageIndex];
            }
            return null;
        }

        /// <summary>
        /// A list of all GuideReferences that have the given referenceTypeName (ignoring
        /// case).
        /// </summary>
        /// <param name="referenceTypeName"></param>
        public List<GuideReference> getGuideReferencesByType(string referenceTypeName)
        {
            List<GuideReference> result = new List<GuideReference>();
            foreach (GuideReference guideReference in references)
            {
                if (referenceTypeName.Equals(guideReference.getType()))
                {
                    result.Add(guideReference);
                }
            }
            return result;
        }

        public List<GuideReference> getReferences()
        {
            return this.references;
        }

        private void initCoverPage()
        {
            int result = COVERPAGE_NOT_FOUND;
            for (int i = 0; i < references.Count; i++)
            {
                GuideReference guideReference = references[i];
                if (guideReference.getType().Equals(GuideReference.COVER))
                {
                    result = i;
                    break;
                }
            }
            coverPageIndex = result;
        }

        /// 
        /// <param name="coverPage"></param>
        public void setCoverPage(Resource coverPage)
        {
            GuideReference coverpageGuideReference = new GuideReference(coverPage, GuideReference.COVER, DEFAULT_COVER_TITLE);
            setCoverReference(coverpageGuideReference);
        }

        /// 
        /// <param name="guideReference"></param>
        public int setCoverReference(GuideReference guideReference)
        {
            if (coverPageIndex >= 0)
            {
                references[coverPageIndex] = guideReference;
            }
            else
            {
                references.Add(guideReference);
                coverPageIndex = 0;
            }
            return coverPageIndex;
        }

        public void setReferences(List<GuideReference> references)
        {
            this.references = references;
            uncheckCoverPage();
        }

        private void uncheckCoverPage()
        {
            this.coverPageIndex = COVERPAGE_UNITIALIZED;
        }

    }//end Guide

}//end namespace domain