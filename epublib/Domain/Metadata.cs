///////////////////////////////////////////////////////////
//  Metadata.cs
//  Implementation of the Class Metadata
//  Generated by Enterprise Architect
//  Created on:      02-ÎåÔÂ-2012 16:21:03
//  Original author: lanfengqi
///////////////////////////////////////////////////////////


using System;
using System.Collections.Generic;
using nl.siegmann.epublib.domain;
using nl.siegmann.epublib.service;
using nl.siegmann.epublib.util;

namespace nl.siegmann.epublib.domain
{
    /// <summary>
    /// A Book's collection of Metadata. In the future it should contain all Dublin
    /// Core attributes, for now it contains a set of often-used ones.
    /// </summary>
    [Serializable]
    public class Metadata
    {

        private List<Author> authors = new List<Author>();
        private bool autoGeneratedId = true;
        private List<Author> contributors = new List<Author>();
        private Resource coverImage;
        private List<Date> dates = new List<Date>();
        private static readonly string DEFAULT_LANGUAGE = "en";
        private List<String> descriptions = new List<String>();
        private string format = MediatypeService.EPUB.getName();
        private List<Identifier> identifiers = new List<Identifier>();
        private string language = DEFAULT_LANGUAGE;
        private Dictionary<string, string> otherProperties = new Dictionary<string, string>();
        private List<String> publishers = new List<String>();
        private List<String> rights = new List<String>();
        private static readonly long serialVersionUID = -2437262888962149444L;
        private List<String> subjects = new List<String>();
        private List<String> titles = new List<String>();
        private List<String> types = new List<String>();



        public Metadata()
        {
            identifiers.Add(new Identifier());
            autoGeneratedId = true;
        }

        /// 
        /// <param name="author"></param>
        public Author addAuthor(Author author)
        {

            authors.Add(author);
            return author;
        }

        /// 
        /// <param name="contributor"></param>
        public Author addContributor(Author contributor)
        {
            contributors.Add(contributor);
            return contributor;
        }

        /// 
        /// <param name="date"></param>
        public Date addDate(Date date)
        {
            dates.Add(date);
            return date;
        }

        /// 
        /// <param name="description"></param>
        public string addDescription(string description)
        {
            descriptions.Add(description);
            return description;
        }

        /// 
        /// <param name="identifier"></param>
        public Identifier addIdentifier(Identifier identifier)
        {
            if (autoGeneratedId && (!(identifiers.Count == 0)))
            {
                identifiers[0] = identifier;
            }
            else
            {
                identifiers.Add(identifier);
            }
            autoGeneratedId = false;
            return identifier;
        }

        /// 
        /// <param name="publisher"></param>
        public string addPublisher(string publisher)
        {
            publishers.Add(publisher);
            return publisher;
        }

        /// 
        /// <param name="title"></param>
        public string addTitle(string title)
        {
            titles.Add(title);
            return title;
        }

        /// 
        /// <param name="type"></param>
        public string addType(string type)
        {
            types.Add(type);
            return type;
        }


        public List<Author> getAuthors()
        {

            return authors;
        }

        public List<Author> getContributors()
        {

            return contributors;
        }

        public List<Date> getDates()
        {

            return dates;
        }

        public List<String> getDescriptions()
        {

            return descriptions;
        }

        /// <summary>
        /// Gets the first non-blank title of the book. Will return "" if no title found.
        /// </summary>
        public string getFirstTitle()
        {
            if (titles == null || titles.Count == 0)
            {
                return "";
            }
            foreach (String title in titles)
            {
                if (StringUtil.isNotBlank(title))
                {
                    return title;
                }
            }
            return "";
        }

        public string getFormat()
        {
            return format;
        }

        public List<Identifier> getIdentifiers()
        {
            return identifiers;
        }

        public string getLanguage()
        {
            return language;
        }

        /// <summary>
        /// Metadata properties not hard-coded like the author, title, etc.
        /// </summary>
        public Dictionary<String, String> getOtherProperties()
        {
            return otherProperties;
        }

        public List<String> getPublishers()
        {

            return publishers;
        }

        public List<String> getRights()
        {

            return rights;
        }

        public List<String> getSubjects()
        {

            return subjects;
        }

        public List<String> getTitles()
        {

            return titles;
        }

        public List<String> getTypes()
        {

            return types;
        }

        public bool isAutoGeneratedId()
        {

            return autoGeneratedId;
        }

        /// 
        /// <param name="authors"></param>
        public void setAuthors(List<Author> authors)
        {
            this.authors = authors;
        }

        /// 
        /// <param name="contributors"></param>
        public void setContributors(List<Author> contributors)
        {
            this.contributors = contributors;
        }

        /// 
        /// <param name="dates"></param>
        public void setDates(List<Date> dates)
        {
            this.dates = dates;
        }

        /// 
        /// <param name="descriptions"></param>
        public void setDescriptions(List<String> descriptions)
        {
            this.descriptions = descriptions;
        }

        /// 
        /// <param name="format"></param>
        public void setFormat(string format)
        {
            this.format = format;
        }

        /// 
        /// <param name="identifiers"></param>
        public void setIdentifiers(List<Identifier> identifiers)
        {
            this.identifiers = identifiers;
        }

        /// 
        /// <param name="language"></param>
        public void setLanguage(string language)
        {
            this.language = language;
        }

        /// 
        /// <param name="otherProperties"></param>
        public void setOtherProperties(Dictionary<string, string> otherProperties)
        {
            this.otherProperties = otherProperties;
        }

        /// 
        /// <param name="publishers"></param>
        public void setPublishers(List<String> publishers)
        {
            this.publishers = publishers;
        }

        /// 
        /// <param name="rights"></param>
        public void setRights(List<String> rights)
        {
            this.rights = rights;
        }

        /// 
        /// <param name="subjects"></param>
        public void setSubjects(List<String> subjects)
        {
            this.subjects = subjects;
        }

        /// 
        /// <param name="titles"></param>
        public void setTitles(List<String> titles)
        {
            this.titles = titles;
        }

        /// 
        /// <param name="types"></param>
        public void setTypes(List<String> types)
        {
            this.types = types;
        }

    }//end Metadata

}//end namespace domain