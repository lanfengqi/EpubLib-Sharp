///////////////////////////////////////////////////////////
//  Resources.cs
//  Implementation of the Class Resources
//  Generated by Enterprise Architect
//  Created on:      02-ÎåÔÂ-2012 16:21:05
//  Original author: lanfengqi
///////////////////////////////////////////////////////////


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using nl.siegmann.epublib.domain;
namespace nl.siegmann.epublib.domain {
	/// <summary>
	/// All the resources that make up the book. XHTML files, images and epub xml
	/// documents must be here.
	/// </summary>
    [Serializable]
	public class Resources  {

		private static readonly string IMAGE_PREFIX = "image_";
		private static readonly string ITEM_PREFIX = "item_";
		private int lastId = 1;
        private Dictionary<String, Resource> resources = new Dictionary<String, Resource>();
		private static readonly long serialVersionUID = 2450876953383871451L;

		public Resources(){

		}

		~Resources(){

		}

		public virtual void Dispose(){

		}

		/// <summary>
		/// Adds a resource to the resources.  Fixes the resources id and href if necessary.
		/// 
		/// </summary>
		/// <param name="resource"></param>
		public Resource add(Resource resource){

			return null;
		}

		/// <summary>
		/// Adds all resources from the given Collection of resources to the existing
		/// collection.
		/// </summary>
		/// <param name="resources">resources</param>
		public void addAll(Collection<Resource> resources){

		}

		/// <summary>
		/// Whether there exists a resource with the given href
		/// </summary>
		/// <param name="href"></param>
		public bool containsByHref(string href){

			return false;
		}

		/// <summary>
		/// Whether the map of resources already contains a resource with the given id.
		/// </summary>
		/// <param name="id"></param>
		public bool containsId(string id){

			return false;
		}

		/// 
		/// <param name="mediaType"></param>
		/// <param name="counter"></param>
		private string createHref(MediaType mediaType, int counter){

			return "";
		}

		/// <summary>
		/// Creates a new resource id that is guarenteed to be unique for this set of
		/// Resources
		/// </summary>
		/// <param name="resource"></param>
		private string createUniqueResourceId(Resource resource){

			return "";
		}

		/// <summary>
		/// Gets the first resource (random order) with the give mediatype.  Useful for
		/// looking up the table of contents as it's supposed to be the only resource with
		/// NCX mediatype.
		/// </summary>
		/// <param name="mediaType"></param>
		public Resource findFirstResourceByMediaType(MediaType mediaType){

			return null;
		}

		/// <summary>
		/// Gets the first resource (random order) with the give mediatype.  Useful for
		/// looking up the table of contents as it's supposed to be the only resource with
		/// NCX mediatype.
		/// </summary>
		/// <param name="resources"></param>
		/// <param name="mediaType"></param>
		public static Resource findFirstResourceByMediaType(Collection<Resource> resources, MediaType mediaType){

			return null;
		}

		/// 
		/// <param name="resource"></param>
		private void fixResourceHref(Resource resource){

		}

		/// <summary>
		/// Checks the id of the given resource and changes to a unique identifier if it
		/// isn't one already.
		/// </summary>
		/// <param name="resource">resource</param>
		public void fixResourceId(Resource resource){

		}

		public Collection<Resource> getAll(){

			return null;
		}

		public Collection<String> getAllHrefs(){

			return null;
		}

		/// <summary>
		/// Gets the resource with the given href. If the given href contains a fragmentId
		/// then that fragment id will be ignored.
		/// </summary>
		/// null if not found.
		/// <param name="href"></param>
		public Resource getByHref(string href){

			return null;
		}

		/// <summary>
		/// Gets the resource with the given id.
		/// </summary>
		/// null if not found
		/// <param name="id"></param>
		public Resource getById(string id){

			return null;
		}

		/// <summary>
		/// First tries to find a resource with as id the given idOrHref, if that fails it
		/// tries to find one with the idOrHref as href.
		/// </summary>
		/// <param name="idOrHref"></param>
		public Resource getByIdOrHref(string idOrHref){

			return null;
		}

		/// 
		/// <param name="resource"></param>
		private string getResourceItemPrefix(Resource resource){

			return "";
		}

		/// <summary>
		/// The resources that make up this book. Resources can be xhtml pages, images, xml
		/// documents, etc.
		/// </summary>
        public Dictionary<String, Resource> getResourceMap()
        {

			return null;
		}

		/// <summary>
		/// All resources that have the given MediaType.
		/// </summary>
		/// <param name="mediaType"></param>
		public List<Resource> getResourcesByMediaType(MediaType mediaType){

			return null;
		}

		/// <summary>
		/// All Resources that match any of the given list of MediaTypes
		/// </summary>
		/// <param name="mediaTypes"></param>
		public List<Resource> getResourcesByMediaTypes(MediaType[] mediaTypes){

			return null;
		}

		public bool isEmpty(){

			return false;
		}

		/// <summary>
		/// Check if the id is a valid identifier. if not: prepend with valid identifier
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="resource"></param>
		private string makeValidId(string resourceId, Resource resource){

			return "";
		}

		/// <summary>
		/// Remove the resource with the given href.
		/// </summary>
		/// the removed resource, null if not found
		/// <param name="href"></param>
		public Resource remove(string href){

			return null;
		}

		/// <summary>
		/// Sets the collection of Resources to the given collection of resources
		/// </summary>
		/// <param name="resources">resources</param>
		public void set(Collection<Resource> resources){

		}

		/// <summary>
		/// Sets the collection of Resources to the given collection of resources
		/// </summary>
		/// <param name="resources">A map with as keys the resources href and as values the
		/// Resources</param>
        public void set(Dictionary<String, Resource> resources)
        {

		}

		/// <summary>
		/// The number of resources
		/// </summary>
		public int size(){

			return 0;
		}

	}//end Resources

}//end namespace domain