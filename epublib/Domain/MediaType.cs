///////////////////////////////////////////////////////////
//  MediaType.cs
//  Implementation of the Class MediaType
//  Generated by Enterprise Architect
//  Created on:      02-ÎåÔÂ-2012 16:21:02
//  Original author: lanfengqi
///////////////////////////////////////////////////////////


using System;
using System.Collections.ObjectModel;

namespace nl.siegmann.epublib.domain
{
    /// <summary>
    /// MediaType is used to tell the type of content a resource is.  Examples of
    /// mediatypes are image/gif, text/css and application/xhtml+xml  All allowed
    /// mediaTypes are maintained bye the MediaTypeService.
    /// </summary>
    /// <see>nl.siegmann.epublib.service.MediatypeService</see>
    [Serializable]
    public class MediaType
    {

        private string defaultExtension;
        private string[] extensions;
        private string name;
        private static readonly long serialVersionUID = -7256091153727506788L;

        /// 
        /// <param name="name"></param>
        /// <param name="defaultExtension"></param>
        public MediaType(string name, string defaultExtension)
            : this(name, defaultExtension, new String[] { defaultExtension })
        {

        }

        /// 
        /// <param name="name"></param>
        /// <param name="defaultExtension"></param>
        /// <param name="extensions"></param>
        public MediaType(string name, string defaultExtension, String[] extensions)
        {
            this.name = name;
            this.defaultExtension = defaultExtension;
            this.extensions = extensions;
        }

        /// 
        /// <param name="otherMediaType"></param>
        public bool equals(Object otherMediaType)
        {
            if (!(otherMediaType.GetType() == typeof(MediaType)))
            {
                return false;
            }
            return name.Equals(((MediaType)otherMediaType).getName());
        }

        public string getDefaultExtension()
        {
            return defaultExtension;
        }

        public string[] getExtensions()
        {
            return extensions;
        }

        public string getName()
        {
            return name;
        }

        public int hashCode()
        {
            if (name == null)
                return 0;
            return name.GetHashCode();
        }

        public string toString()
        {

            return name;
        }

    }//end MediaType

}//end namespace domain